[X] w pelni funkcjonalna klasa FileStream do ladowania plikow - nakladka

[X] podstawowa wersja klasy Resource do uzycia w calym projekcie

[X] manager zasobow calej gry - ResourceManager - korzystajacy z klasy Resource

[X] fgResourceManager -> rozroznianie typow zasobow

[ ] poprawna obsluga bledow / zwracanie / info

[ ] poprawienie systemu loggera

[X] system do profilowania

[X] fgResourceManager -> pliki konfiguracyjne tj. definiowanie grup plikow 
	traktowanych jako paczka (np. do zaladowania poziomu czy grafik GUI)

	[X] wydaje sie ze bedzie potrzebna klasa fgResourceGroup ewentualnie 
	    jeszcze fgResourceFile/fgResourceConfig

[X] restrukturyzacja ladowania tekstur - podpiecie pod klase Resource i ResourceManager

[X] poprawienie klasy QualityManager - pytanie jest czy klasa ta powinna 
    definiowac nazwy plikow biorac pod uwage rozdzielczosc ekranu - raczej nie

[X] poprawienie klasy Font - powinna uzywac systemu zasobow i tekstur (w sumie 
    klasa Font moze rozszerzac klase Texture poniewaz tak naprawde Font to tekstura)

[ ] stworzenie odpowiednich klas do ladowania plikow audio oraz muzyki - oczywiscie 
    z odpowiednim podpieciem pod ResourceManagera

[X] klasa do ladowania pliku XML - plus wspieranie parsowania (w jakis 
    latwiejszy i bardziej oczywisty sposob - opcjonalnie)

[X] ladowanie pliku Settings XML - Settings jako Resource File? nie (po 
    parsowaniu i tak text data jest zwalniane, pliki config nie sa resourcami)

[X] obsluga ladowania tekstury do karty graficznej - nakladka na OGL i GFX

[X] poprawne zamykanie aplikacji czyli zwalnianie wszystkich zasobow w 
    poprawnej kolejnosci w tym wszystkich singletonow

[ ] P4 - Stworzenie klasy Material w glownym podsystemie GFX (wazne - 
    tablice wierzcholkow/kolorow/koordynatow tekstur sa grupowane wg uzytego materialu)

[X] stworzenie podstawowego systemu rysowania 2D z buforowaniem i 
    dzieleniem buforow pod wzgledem uzytej tekstury (materialu)

[X] - todo - przejscie na ogles2.x, teraz bedzie troche inaczej - 
    obsluga frustum i ortho view - podstawowa inicjalizacja + nakladki na OGL

[X] podstawowa wersja klasy Camera

[X] poprawienie systemu particles - narazie nic nie bedzie dzialac i tak 
    - konieczny jest dzialajacy podsystem rysowania
[X] dodanie drawera do particles - 
    wymagany juz dzialajacy (glownie 2D) podsystem GFX

[ ] podstawowe wsparcie oswietlenia 

[X] podstawowa wersja GUI
[X] podstawowe definicje klas / obiektow GUI
[X] ladowanie pliku konfiguracyjnego Gui Structure
[X] ladowanie pliku konf. Gui Style Sheet
[ ] podpiecie GUI pod resource manager
[ ] Loading Screen z paskiem postepu (wymagana podstawowa wersja GUI)
	[ ] Potrzebne przy tym jest rowniez wpelni dzialajacy podsystem Zasobow,
		poniewaz zasoby musza byc ladowane sekwencyjnie 
	[ ] Mozliwe rowniez ze funkcje ktore laduja dany jeden plik rowniez musza
		byc w stanie przerwac prace (wyjsc z petli a potem do niej wrocic)
		[ ] - dodatkowy bufor / cos takiego
		[ ] - FileStream - jesli uzywane jest FileStream, mozna zrobic cos jak
			SaveState (zapisanie pozycji fseek itp)

[ ] smart pointers / hash tables / etc - szybka dereferencja w systemie Resource
	[X] - Jest to w pewien blady sposob zaimplementowane w Handle Managerze
[X] mozliwosc odnoszenia sie do resource'a za pomoca napisu (string/char *)
	[X] - trzeba jeszcze przetestowac

[ ] - system logowania, kolejka wiadomosci (info text), grupowanie, itp

[X] - wydzielenie zarzadzania jakoscia na zewnatrz, jeden resource zawiera
		info o roznych plikach - kategorie jakosci, itp
	[X]- wiele jakosci - jeden resource handle



