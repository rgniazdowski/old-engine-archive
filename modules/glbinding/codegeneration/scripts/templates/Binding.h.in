#pragma once

#include <glbinding/glbinding_api.h>

#include <glbinding/gl/types.h>

#include <glbinding/ContextHandle.h>
#include <glbinding/Function.h>
//#include <glbinding/PointerIterator.h>


namespace glbinding
{

class GLBINDING_API Binding
{
public:
//  using iterator = PointerIterator<AbstractFunction, sizeof(Function<void>)>;
//  using const_iterator = PointerIterator<const AbstractFunction, sizeof(Function<void>)>;

    Binding() = delete;

    static void initialize(bool resolveFunctions = true);
    static void initialize(ContextHandle context, bool useContext = true, bool resolveFunctions = true);

    static void resolveFunctions();

    static void useCurrentContext();
    static void useContext(ContextHandle context);

    static void releaseCurrentContext();
    static void releaseContext(ContextHandle context);

//  iterator begin();
//  iterator end();    

//  const_iterator begin() const;
//  const_iterator end() const;

    static size_t size();

	using array_t = std::array<AbstractFunction *, %s>;

    static const array_t & functions();

public:
%s

protected:
	static const array_t s_functions;
};

} // namespace glbinding
